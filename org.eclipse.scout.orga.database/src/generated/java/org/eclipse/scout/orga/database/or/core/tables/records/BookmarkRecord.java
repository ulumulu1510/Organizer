/*
 * This file is generated by jOOQ.
*/
package org.eclipse.scout.orga.database.or.core.tables.records;


import javax.annotation.Generated;

import org.eclipse.scout.orga.database.or.core.tables.Bookmark;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookmarkRecord extends UpdatableRecordImpl<BookmarkRecord> implements Record2<String, byte[]> {

    private static final long serialVersionUID = 1499848595;

    /**
     * Setter for <code>core.bookmark.user</code>.
     */
    public void setUser(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>core.bookmark.user</code>.
     */
    public String getUser() {
        return (String) get(0);
    }

    /**
     * Setter for <code>core.bookmark.data</code>.
     */
    public void setData(byte... value) {
        set(1, value);
    }

    /**
     * Getter for <code>core.bookmark.data</code>.
     */
    public byte[] getData() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Bookmark.BOOKMARK.USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return Bookmark.BOOKMARK.DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component2() {
        return getData();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getData();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BookmarkRecord value1(String value) {
        setUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BookmarkRecord value2(byte... value) {
        setData(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BookmarkRecord values(String value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookmarkRecord
     */
    public BookmarkRecord() {
        super(Bookmark.BOOKMARK);
    }

    /**
     * Create a detached, initialised BookmarkRecord
     */
    public BookmarkRecord(String user, byte[] data) {
        super(Bookmark.BOOKMARK);

        set(0, user);
        set(1, data);
    }
}
