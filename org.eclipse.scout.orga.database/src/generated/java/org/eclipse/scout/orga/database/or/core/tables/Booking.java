/*
 * This file is generated by jOOQ.
*/
package org.eclipse.scout.orga.database.or.core.tables;


import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.eclipse.scout.orga.database.generator.converter.TimeStampConverter;
import org.eclipse.scout.orga.database.or.core.Core;
import org.eclipse.scout.orga.database.or.core.Keys;
import org.eclipse.scout.orga.database.or.core.tables.records.BookingRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Booking extends TableImpl<BookingRecord> {

    private static final long serialVersionUID = -620830030;

    /**
     * The reference instance of <code>core.BOOKING</code>
     */
    public static final Booking BOOKING = new Booking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingRecord> getRecordType() {
        return BookingRecord.class;
    }

    /**
     * The column <code>core.BOOKING.ID</code>.
     */
    public final TableField<BookingRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>core.BOOKING.DESCRIPTION</code>.
     */
    public final TableField<BookingRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.BOOKING.DATE_FROM</code>.
     */
    public final TableField<BookingRecord, Date> DATE_FROM = createField("DATE_FROM", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimeStampConverter());

    /**
     * The column <code>core.BOOKING.DATE_TO</code>.
     */
    public final TableField<BookingRecord, Date> DATE_TO = createField("DATE_TO", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimeStampConverter());

    /**
     * The column <code>core.BOOKING.NOTE</code>.
     */
    public final TableField<BookingRecord, String> NOTE = createField("NOTE", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>core.BOOKING.USER_ID</code>.
     */
    public final TableField<BookingRecord, String> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>core.BOOKING.ACTIVE</code>.
     */
    public final TableField<BookingRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>core.BOOKING</code> table reference
     */
    public Booking() {
        this(DSL.name("BOOKING"), null);
    }

    /**
     * Create an aliased <code>core.BOOKING</code> table reference
     */
    public Booking(String alias) {
        this(DSL.name(alias), BOOKING);
    }

    /**
     * Create an aliased <code>core.BOOKING</code> table reference
     */
    public Booking(Name alias) {
        this(alias, BOOKING);
    }

    private Booking(Name alias, Table<BookingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Booking(Name alias, Table<BookingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Core.CORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookingRecord> getPrimaryKey() {
        return Keys.PK_BOOKING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookingRecord>> getKeys() {
        return Arrays.<UniqueKey<BookingRecord>>asList(Keys.PK_BOOKING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Booking as(String alias) {
        return new Booking(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Booking as(Name alias) {
        return new Booking(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(String name) {
        return new Booking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Name name) {
        return new Booking(name, null);
    }
}
