/*
 * This file is generated by jOOQ.
*/
package org.eclipse.scout.orga.database.or.core.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.eclipse.scout.orga.database.or.core.Core;
import org.eclipse.scout.orga.database.or.core.Keys;
import org.eclipse.scout.orga.database.or.core.tables.records.CodeRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Code extends TableImpl<CodeRecord> {

    private static final long serialVersionUID = 2086681312;

    /**
     * The reference instance of <code>core.CODE</code>
     */
    public static final Code CODE = new Code();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeRecord> getRecordType() {
        return CodeRecord.class;
    }

    /**
     * The column <code>core.CODE.ID</code>.
     */
    public final TableField<CodeRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>core.CODE.TYPE_ID</code>.
     */
    public final TableField<CodeRecord, String> TYPE_ID = createField("TYPE_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>core.CODE.ORDER</code>.
     */
    public final TableField<CodeRecord, Double> ORDER = createField("ORDER", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>core.CODE.ICON</code>.
     */
    public final TableField<CodeRecord, String> ICON = createField("ICON", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>core.CODE.VALUE</code>.
     */
    public final TableField<CodeRecord, String> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>core.CODE.ACTIVE</code>.
     */
    public final TableField<CodeRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>core.CODE</code> table reference
     */
    public Code() {
        this(DSL.name("CODE"), null);
    }

    /**
     * Create an aliased <code>core.CODE</code> table reference
     */
    public Code(String alias) {
        this(DSL.name(alias), CODE);
    }

    /**
     * Create an aliased <code>core.CODE</code> table reference
     */
    public Code(Name alias) {
        this(alias, CODE);
    }

    private Code(Name alias, Table<CodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Code(Name alias, Table<CodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Core.CORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CodeRecord> getPrimaryKey() {
        return Keys.PK_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeRecord>>asList(Keys.PK_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Code as(String alias) {
        return new Code(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Code as(Name alias) {
        return new Code(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Code rename(String name) {
        return new Code(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Code rename(Name name) {
        return new Code(name, null);
    }
}
